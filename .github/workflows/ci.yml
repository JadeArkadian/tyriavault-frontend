name: CI Pipeline

on:
  push:
    branches: [ "develop", "master" ]
  pull_request:
    branches: [ "develop", "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: 🧭 Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: true

      - name: ⚙️ Setup Node.js 22
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: "pnpm"

      - name: 🧱 Build Angular app
        run: pnpm run build

      - name: 🧪 Run tests
        run: |
          pnpm run test
        continue-on-error: true

      - name: 🔎 SonarQube Scan
        if: github.event_name == 'pull_request'
        uses: SonarSource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: 📊 SonarQube Quality Gate Check
        if: github.event_name == 'pull_request'
        uses: SonarSource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: 💬 Comment PR with SonarQube results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const sonarReportPath = '.scannerwork/report-task.txt';

            let sonarUrl = '';
            let qualityGateStatus = 'PENDING';

            try {
              if (fs.existsSync(sonarReportPath)) {
                const reportContent = fs.readFileSync(sonarReportPath, 'utf8');
                const dashboardUrlMatch = reportContent.match(/dashboardUrl=(.*)/);
                if (dashboardUrlMatch) {
                  sonarUrl = dashboardUrlMatch[1];
                }
              }
            } catch (error) {
              console.log('Could not read SonarQube report:', error);
            }

            const comment = `## 🔍 SonarQube Analysis

            ${sonarUrl ? `📊 [View full report on SonarQube](${sonarUrl})` : '⚠️ Could not retrieve report URL'}

            **Quality Gate Status:** ${qualityGateStatus}

            ---
            *This analysis was automatically generated by the CI Pipeline*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
