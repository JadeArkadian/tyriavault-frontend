name: CI/CD Pipeline

on:
  push:
    branches:
      - "master"
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build_and_analyze:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: 🧭 Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: ⚙️ Setup Node.js 22
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: "pnpm"

      - name: 📥 Install dependencies
        run: pnpm install

      - name: 🧱 Build Angular app
        run: pnpm run build

      - name: 🧪 Run tests with coverage
        run: pnpm run test:coverage

      - name: 📂 Upload coverage report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: coverage-report
          path: ./coverage/lcov-report

      - name: 🔎 SonarQube Scan
        id: sonarqube-scan
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/master'
        uses: SonarSource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602 #v6
        continue-on-error: true 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: 📊 SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/master'
        uses: SonarSource/sonarqube-quality-gate-action@cf038b0e0cdecfa9e56c198bbb7d21d751d62c3b #v1.2.0
        timeout-minutes: 5
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: 💬 Comment PR with SonarQube results
        if: github.event_name == 'pull_request'
        continue-on-error: true
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd #v8
        with:
          script: |
            const fs = require('fs');
            const sonarReportPath = '.scannerwork/report-task.txt';

            let sonarUrl = '';
            let qualityGateStatus = '${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}';

            try {
              if (fs.existsSync(sonarReportPath)) {
                const reportContent = fs.readFileSync(sonarReportPath, 'utf8');
                const dashboardUrlMatch = reportContent.match(/dashboardUrl=(.*)/);
                if (dashboardUrlMatch) {
                  sonarUrl = dashboardUrlMatch[1];
                }
              } else {
                console.log('SonarQube report not found.');
              }
            } catch (error) {
              console.log('Could not read SonarQube report:', error);
            }

            const comment = `## 🔍 SonarQube Analysis

            ${sonarUrl ? `📊 [View full report on SonarQube](${sonarUrl})` : '⚠️ Could not retrieve report URL'}

            **Quality Gate Status:** ${qualityGateStatus} 

            ---
            *This analysis was automatically generated by the CI Pipeline*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: 📤 Upload build artifacts
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: build-artifacts
          path: dist/

  deploy:
    needs: build_and_analyze
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #V5
        with:
          name: build-artifacts

      - name: 📰 Deploy to Render
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}

        run: curl -X POST "$RENDER_DEPLOY_HOOK"
